// Code generated by MockGen. DO NOT EDIT.
// Source: unitofwork.go

// Package gormx is a generated GoMock package.
package gormx

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockGormUnitOfWorkIface is a mock of GormUnitOfWorkIface interface
type MockGormUnitOfWorkIface struct {
	ctrl     *gomock.Controller
	recorder *MockGormUnitOfWorkIfaceMockRecorder
}

// MockGormUnitOfWorkIfaceMockRecorder is the mock recorder for MockGormUnitOfWorkIface
type MockGormUnitOfWorkIfaceMockRecorder struct {
	mock *MockGormUnitOfWorkIface
}

// NewMockGormUnitOfWorkIface creates a new mock instance
func NewMockGormUnitOfWorkIface(ctrl *gomock.Controller) *MockGormUnitOfWorkIface {
	mock := &MockGormUnitOfWorkIface{ctrl: ctrl}
	mock.recorder = &MockGormUnitOfWorkIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGormUnitOfWorkIface) EXPECT() *MockGormUnitOfWorkIfaceMockRecorder {
	return m.recorder
}

// BeginTran mocks base method
func (m *MockGormUnitOfWorkIface) BeginTran(arg0 *gorm.DB) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTran", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTran indicates an expected call of BeginTran
func (mr *MockGormUnitOfWorkIfaceMockRecorder) BeginTran(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTran", reflect.TypeOf((*MockGormUnitOfWorkIface)(nil).BeginTran), arg0)
}

// Rollback mocks base method
func (m *MockGormUnitOfWorkIface) Rollback(arg0 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockGormUnitOfWorkIfaceMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockGormUnitOfWorkIface)(nil).Rollback), arg0)
}

// Commit mocks base method
func (m *MockGormUnitOfWorkIface) Commit(arg0 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockGormUnitOfWorkIfaceMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGormUnitOfWorkIface)(nil).Commit), arg0)
}
